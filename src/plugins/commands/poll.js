const { ThreadType } = require('zca-js');

module.exports.config = {
  name: "poll",
  version: "1.0.0",
  role: 0,
  author: "Assistant",
  description: "T·∫°o b√¨nh ch·ªçn trong nh√≥m v·ªõi nhi·ªÅu t√πy ch·ªçn. Ch·ªâ ho·∫°t ƒë·ªông trong nh√≥m chat",
  category: "Ti·ªán √≠ch",
  usage: 'poll "C√¢u h·ªèi" "L·ª±a ch·ªçn 1" "L·ª±a ch·ªçn 2" [options]',
  cooldowns: 10
};

// C·∫•u h√¨nh
const CONFIG = {
  maxOptions: 10, // S·ªë l∆∞·ª£ng l·ª±a ch·ªçn t·ªëi ƒëa
  minOptions: 2,  // S·ªë l∆∞·ª£ng l·ª±a ch·ªçn t·ªëi thi·ªÉu
  maxQuestionLength: 200, // ƒê·ªô d√†i c√¢u h·ªèi t·ªëi ƒëa
  maxOptionLength: 100,   // ƒê·ªô d√†i m·ªói l·ª±a ch·ªçn t·ªëi ƒëa
  defaultExpiredTime: 24 * 60 * 60 * 1000, // 24 gi·ªù (milliseconds)
};

// H√†m parse arguments t·ª´ chu·ªói c√≥ d·∫•u ngo·∫∑c k√©p
function parseQuotedArgs(text) {
  const args = [];
  let current = '';
  let inQuotes = false;
  let i = 0;
  
  while (i < text.length) {
    const char = text[i];
    
    if (char === '"' && (i === 0 || text[i-1] !== '\\')) {
      inQuotes = !inQuotes;
    } else if (char === ' ' && !inQuotes) {
      if (current.trim()) {
        args.push(current.trim());
        current = '';
      }
    } else {
      current += char;
    }
    i++;
  }
  
  if (current.trim()) {
    args.push(current.trim());
  }
  
  return args;
}

// H√†m t·∫°o poll
async function createPoll(api, groupId, options) {
  try {
    console.log(`üìä ƒêang t·∫°o poll trong nh√≥m: ${groupId}`);
    console.log(`üìù C√¢u h·ªèi: "${options.question}"`);
    console.log(`üìã L·ª±a ch·ªçn: ${options.options.join(', ')}`);
    
    const result = await api.createPoll(options, groupId);
    
    if (result && result.poll_id) {
      console.log(`‚úÖ ƒê√£ t·∫°o poll th√†nh c√¥ng: ID=${result.poll_id}`);
      return { success: true, poll: result };
    } else {
      console.log(`‚ùå Kh√¥ng th·ªÉ t·∫°o poll`);
      return { success: false, error: 'Kh√¥ng th·ªÉ t·∫°o poll' };
    }
    
  } catch (error) {
    console.error(`‚ùå L·ªói khi t·∫°o poll: ${error.message}`);
    return { success: false, error: error.message };
  }
}

// H√†m validate input
function validatePollInput(question, options) {
  const errors = [];
  
  // Ki·ªÉm tra c√¢u h·ªèi
  if (!question || question.trim().length === 0) {
    errors.push('C√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
  } else if (question.length > CONFIG.maxQuestionLength) {
    errors.push(`C√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c d√†i qu√° ${CONFIG.maxQuestionLength} k√Ω t·ª±`);
  }
  
  // Ki·ªÉm tra s·ªë l∆∞·ª£ng l·ª±a ch·ªçn
  if (options.length < CONFIG.minOptions) {
    errors.push(`C·∫ßn √≠t nh·∫•t ${CONFIG.minOptions} l·ª±a ch·ªçn`);
  } else if (options.length > CONFIG.maxOptions) {
    errors.push(`Kh√¥ng ƒë∆∞·ª£c qu√° ${CONFIG.maxOptions} l·ª±a ch·ªçn`);
  }
  
  // Ki·ªÉm tra ƒë·ªô d√†i m·ªói l·ª±a ch·ªçn
  for (let i = 0; i < options.length; i++) {
    if (!options[i] || options[i].trim().length === 0) {
      errors.push(`L·ª±a ch·ªçn ${i + 1} kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng`);
    } else if (options[i].length > CONFIG.maxOptionLength) {
      errors.push(`L·ª±a ch·ªçn ${i + 1} kh√¥ng ƒë∆∞·ª£c d√†i qu√° ${CONFIG.maxOptionLength} k√Ω t·ª±`);
    }
  }
  
  // Ki·ªÉm tra tr√πng l·∫∑p
  const uniqueOptions = [...new Set(options.map(opt => opt.toLowerCase().trim()))];
  if (uniqueOptions.length !== options.length) {
    errors.push('C√°c l·ª±a ch·ªçn kh√¥ng ƒë∆∞·ª£c tr√πng l·∫∑p');
  }
  
  return errors;
}

module.exports.run = async function({ api, event, args, Threads }) {
  const { threadId, type } = event;
  const senderID = event.data?.uidFrom || event.senderID;

  try {
    // Ch·ªâ ho·∫°t ƒë·ªông trong nh√≥m
    if (type !== ThreadType.Group) {
      return api.sendMessage({
        msg: '‚ùå L·ªánh poll ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong nh√≥m chat!',
        ttl: 30000
      }, threadId, type);
    }

    // L·∫•y d·ªØ li·ªáu nh√≥m
    const threadData = await Threads.getData(threadId);
    let groupData = threadData.data || {};

    // Ki·ªÉm tra xem ch·ª©c nƒÉng c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng (m·∫∑c ƒë·ªãnh l√† b·∫≠t)
    if (groupData.poll_enabled === false) {
      return api.sendMessage({
        msg: '‚ùå Ch·ª©c nƒÉng poll ƒëang t·∫Øt!\n\n' +
             'üí° Admin c√≥ th·ªÉ s·ª≠ d·ª•ng "poll on" ƒë·ªÉ b·∫≠t ch·ª©c nƒÉng',
        ttl: 30000
      }, threadId, type);
    }

    // X·ª≠ l√Ω l·ªánh on/off (ch·ªâ admin)
    if (args[0] && (args[0].toLowerCase() === 'on' || args[0].toLowerCase() === 'off')) {
      const action = args[0].toLowerCase();

      // Ki·ªÉm tra quy·ªÅn admin ho·∫∑c support
      const senderIDStr = String(senderID);
      const isBotAdmin = global.users?.admin?.includes(senderIDStr);
      const isSupport = global.users?.support?.includes(senderIDStr);

      if (!isBotAdmin && !isSupport) {
        return api.sendMessage({
          msg: 'üö´ Ch·ªâ admin ho·∫∑c support bot m·ªõi c√≥ th·ªÉ b·∫≠t/t·∫Øt ch·ª©c nƒÉng poll!',
          ttl: 30000
        }, threadId, type);
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i poll
      groupData.poll_enabled = (action === 'on');

      // L∆∞u v√†o database
      await Threads.setData(threadId, groupData);

      const statusText = action === 'on' ? 'b·∫≠t' : 't·∫Øt';
      return api.sendMessage({
        msg: `‚úÖ ƒê√£ ${statusText} ch·ª©c nƒÉng poll cho nh√≥m n√†y!`,
        ttl: 30000
      }, threadId, type);
    }

    // Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n·∫øu kh√¥ng c√≥ args
    if (args.length === 0) {
      return api.sendMessage({
        msg: 'üìä **H∆∞·ªõng d·∫´n t·∫°o Poll**\n\n' +
             '**C√∫ ph√°p:**\n' +
             'poll "C√¢u h·ªèi" "L·ª±a ch·ªçn 1" "L·ª±a ch·ªçn 2" ...\n\n' +
             '**V√≠ d·ª•:**\n' +
             'poll "ƒÇn g√¨ h√¥m nay?" "Ph·ªü" "B√∫n b√≤" "C∆°m t·∫•m"\n\n' +
             '**T√πy ch·ªçn n√¢ng cao:**\n' +
             '‚Ä¢ T·ªëi ƒëa 10 l·ª±a ch·ªçn\n' +
             '‚Ä¢ Poll s·∫Ω t·ª± ƒë·ªông h·∫øt h·∫°n sau 24 gi·ªù\n' +
             '‚Ä¢ H·ªó tr·ª£ ƒëa l·ª±a ch·ªçn v√† ·∫©n danh',
        ttl: 60000
      }, threadId, type);
    }

    // Parse arguments
    const fullText = args.join(' ');
    const parsedArgs = parseQuotedArgs(fullText);

    if (parsedArgs.length < 3) {
      return api.sendMessage({
        msg: '‚ùå C·∫ßn √≠t nh·∫•t 1 c√¢u h·ªèi v√† 2 l·ª±a ch·ªçn!\n\n' +
             'üí° V√≠ d·ª•: poll "C√¢u h·ªèi?" "L·ª±a ch·ªçn 1" "L·ª±a ch·ªçn 2"',
        ttl: 30000
      }, threadId, type);
    }

    const question = parsedArgs[0];
    const options = parsedArgs.slice(1);

    // Validate input
    const validationErrors = validatePollInput(question, options);
    if (validationErrors.length > 0) {
      return api.sendMessage({
        msg: '‚ùå **L·ªói t·∫°o poll:**\n\n' + validationErrors.join('\n'),
        ttl: 30000
      }, threadId, type);
    }

    // T·∫°o poll options
    const pollOptions = {
      question: question,
      options: options,
      expiredTime: Date.now() + CONFIG.defaultExpiredTime,
      allowMultiChoices: false, // C√≥ th·ªÉ th√™m t√πy ch·ªçn n√†y sau
      allowAddNewOption: false,
      hideVotePreview: false,
      isAnonymous: false
    };

    // G·ª≠i tin nh·∫Øn ƒëang t·∫°o poll
    const creatingMsg = await api.sendMessage({
      msg: `üìä ƒêang t·∫°o poll: "${question}"...`,
      ttl: 10000
    }, threadId, type);

    // T·∫°o poll
    const result = await createPoll(api, threadId, pollOptions);

    if (!result.success) {
      return api.sendMessage({
        msg: `‚ùå Kh√¥ng th·ªÉ t·∫°o poll: ${result.error}`,
        ttl: 20000
      }, threadId, type);
    }

    // Th√¥ng b√°o th√†nh c√¥ng
    return api.sendMessage({
      msg: `‚úÖ **ƒê√£ t·∫°o poll th√†nh c√¥ng!**\n\n` +
           `üìù **C√¢u h·ªèi:** ${question}\n` +
           `üìã **L·ª±a ch·ªçn:** ${options.length} t√πy ch·ªçn\n` +
           `‚è∞ **H·∫øt h·∫°n:** 24 gi·ªù\n\n` +
           `üëÜ H√£y b√¨nh ch·ªçn b·∫±ng c√°ch nh·∫•n v√†o c√°c l·ª±a ch·ªçn ·ªü tr√™n!`,
      ttl: 300000 // 5 ph√∫t
    }, threadId, type);

  } catch (error) {
    console.error('‚ùå L·ªói trong l·ªánh poll:', error);
    return api.sendMessage({
      msg: '‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫°o poll!',
      ttl: 20000
    }, threadId, type);
  }
};
