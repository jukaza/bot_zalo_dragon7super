const Users = require('../../core/controllers/users');
const logger = require('../logger');

class WeatherStorage {
    /**
     * L·∫•y danh s√°ch th√†nh ph·ªë c·ªßa user
     * @param {string} userId - ID c·ªßa user
     * @returns {Array} - Danh s√°ch th√†nh ph·ªë
     */
    getUserCities(userId) {
        try {
            const userData = Users.getData(userId);
            return userData.data.weather_cities || [];
        } catch (error) {
            logger.log(`L·ªói khi l·∫•y danh s√°ch th√†nh ph·ªë c·ªßa user ${userId}: ${error.message}`, 'error');
            return [];
        }
    }

    /**
     * Th√™m th√†nh ph·ªë v√†o danh s√°ch c·ªßa user
     * @param {string} userId - ID c·ªßa user
     * @param {Object} cityData - Th√¥ng tin th√†nh ph·ªë
     * @returns {Promise<boolean>} - Th√†nh c√¥ng hay kh√¥ng
     */
    async addUserCity(userId, cityData) {
        try {
            const userData = await Users.getData(userId);
            const currentData = userData.data;

            // Kh·ªüi t·∫°o m·∫£ng n·∫øu ch∆∞a c√≥
            if (!currentData.weather_cities) {
                currentData.weather_cities = [];
            }

            // Ki·ªÉm tra xem th√†nh ph·ªë ƒë√£ t·ªìn t·∫°i ch∆∞a
            const existingCity = currentData.weather_cities.find(city => 
                city.lat === cityData.lat && city.lon === cityData.lon
            );

            if (existingCity) {
                return { success: false, message: 'Th√†nh ph·ªë n√†y ƒë√£ c√≥ trong danh s√°ch!' };
            }

            // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng th√†nh ph·ªë (t·ªëi ƒëa 10)
            if (currentData.weather_cities.length >= 10) {
                return { success: false, message: 'B·∫°n ch·ªâ c√≥ th·ªÉ theo d√µi t·ªëi ƒëa 10 th√†nh ph·ªë!' };
            }

            // Th√™m th√†nh ph·ªë m·ªõi
            const newCity = {
                name: cityData.name,
                display_name: cityData.display_name,
                country: cityData.country,
                state: cityData.state || '',
                lat: cityData.lat,
                lon: cityData.lon,
                auto_notify: true, // M·∫∑c ƒë·ªãnh b·∫≠t th√¥ng b√°o
                added_date: new Date().toISOString()
            };

            currentData.weather_cities.push(newCity);

            // Kh·ªüi t·∫°o c√†i ƒë·∫∑t th·ªùi ti·∫øt n·∫øu ch∆∞a c√≥
            if (!currentData.weather_settings) {
                currentData.weather_settings = {
                    auto_notify_enabled: true,
                    notify_time: '06:00'
                };
            }

            await Users.setData(userId, currentData);
            logger.log(`User ${userId} ƒë√£ th√™m th√†nh ph·ªë: ${cityData.display_name}`, 'info');
            
            return { success: true, message: `ƒê√£ th√™m ${cityData.display_name} v√†o danh s√°ch theo d√µi!` };
        } catch (error) {
            logger.log(`L·ªói khi th√™m th√†nh ph·ªë cho user ${userId}: ${error.message}`, 'error');
            return { success: false, message: 'C√≥ l·ªói x·∫£y ra khi th√™m th√†nh ph·ªë!' };
        }
    }

    /**
     * X√≥a th√†nh ph·ªë kh·ªèi danh s√°ch c·ªßa user
     * @param {string} userId - ID c·ªßa user
     * @param {number} cityIndex - Index c·ªßa th√†nh ph·ªë trong danh s√°ch
     * @returns {Promise<Object>} - K·∫øt qu·∫£ x√≥a
     */
    async removeUserCity(userId, cityIndex) {
        try {
            const userData = await Users.getData(userId);
            const currentData = userData.data;

            if (!currentData.weather_cities || currentData.weather_cities.length === 0) {
                return { success: false, message: 'B·∫°n ch∆∞a c√≥ th√†nh ph·ªë n√†o trong danh s√°ch!' };
            }

            if (cityIndex < 0 || cityIndex >= currentData.weather_cities.length) {
                return { success: false, message: 'S·ªë th·ª© t·ª± th√†nh ph·ªë kh√¥ng h·ª£p l·ªá!' };
            }

            const removedCity = currentData.weather_cities[cityIndex];
            currentData.weather_cities.splice(cityIndex, 1);

            await Users.setData(userId, currentData);
            logger.log(`User ${userId} ƒë√£ x√≥a th√†nh ph·ªë: ${removedCity.display_name}`, 'info');
            
            return { 
                success: true, 
                message: `ƒê√£ x√≥a ${removedCity.display_name} kh·ªèi danh s√°ch theo d√µi!`,
                removedCity: removedCity
            };
        } catch (error) {
            logger.log(`L·ªói khi x√≥a th√†nh ph·ªë cho user ${userId}: ${error.message}`, 'error');
            return { success: false, message: 'C√≥ l·ªói x·∫£y ra khi x√≥a th√†nh ph·ªë!' };
        }
    }

    /**
     * C·∫≠p nh·∫≠t c√†i ƒë·∫∑t th·ªùi ti·∫øt c·ªßa user
     * @param {string} userId - ID c·ªßa user
     * @param {Object} settings - C√†i ƒë·∫∑t m·ªõi
     * @returns {Promise<boolean>} - Th√†nh c√¥ng hay kh√¥ng
     */
    async updateUserWeatherSettings(userId, settings) {
        try {
            const userData = await Users.getData(userId);
            const currentData = userData.data;

            if (!currentData.weather_settings) {
                currentData.weather_settings = {
                    auto_notify_enabled: true,
                    notify_time: '06:00'
                };
            }

            // C·∫≠p nh·∫≠t c√†i ƒë·∫∑t
            Object.assign(currentData.weather_settings, settings);

            await Users.setData(userId, currentData);
            logger.log(`User ${userId} ƒë√£ c·∫≠p nh·∫≠t c√†i ƒë·∫∑t th·ªùi ti·∫øt`, 'info');
            
            return { success: true, message: 'ƒê√£ c·∫≠p nh·∫≠t c√†i ƒë·∫∑t th√†nh c√¥ng!' };
        } catch (error) {
            logger.log(`L·ªói khi c·∫≠p nh·∫≠t c√†i ƒë·∫∑t cho user ${userId}: ${error.message}`, 'error');
            return { success: false, message: 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t c√†i ƒë·∫∑t!' };
        }
    }

    /**
     * L·∫•y c√†i ƒë·∫∑t th·ªùi ti·∫øt c·ªßa user
     * @param {string} userId - ID c·ªßa user
     * @returns {Object} - C√†i ƒë·∫∑t th·ªùi ti·∫øt
     */
    getUserWeatherSettings(userId) {
        try {
            const userData = Users.getData(userId);
            return userData.data.weather_settings || {
                auto_notify_enabled: true,
                notify_time: '06:00'
            };
        } catch (error) {
            logger.log(`L·ªói khi l·∫•y c√†i ƒë·∫∑t th·ªùi ti·∫øt c·ªßa user ${userId}: ${error.message}`, 'error');
            return {
                auto_notify_enabled: true,
                notify_time: '06:00'
            };
        }
    }

    /**
     * L·∫•y t·∫•t c·∫£ users c√≥ b·∫≠t th√¥ng b√°o t·ª± ƒë·ªông
     * @returns {Array} - Danh s√°ch users v√† th√†nh ph·ªë c·ªßa h·ªç
     */
    getAllUsersWithAutoNotify() {
        try {
            const allUsers = Users.getAll();
            const usersWithNotify = [];

            for (const user of allUsers) {
                const userData = user.data;
                if (userData.weather_cities &&
                    userData.weather_cities.length > 0 &&
                    userData.weather_settings &&
                    userData.weather_settings.auto_notify_enabled) {

                    usersWithNotify.push({
                        userId: user.userId,
                        cities: userData.weather_cities.filter(city => city.auto_notify),
                        settings: userData.weather_settings
                    });
                }
            }

            return usersWithNotify;
        } catch (error) {
            logger.log(`L·ªói khi l·∫•y danh s√°ch users c√≥ th√¥ng b√°o t·ª± ƒë·ªông: ${error.message}`, 'error');
            return [];
        }
    }

    /**
     * Format danh s√°ch th√†nh ph·ªë th√†nh tin nh·∫Øn
     * @param {Array} cities - Danh s√°ch th√†nh ph·ªë
     * @returns {string} - Tin nh·∫Øn ƒë√£ format
     */
    formatCitiesList(cities) {
        if (!cities || cities.length === 0) {
            return 'üìç B·∫°n ch∆∞a c√≥ th√†nh ph·ªë n√†o trong danh s√°ch theo d√µi.\n\nS·ª≠ d·ª•ng l·ªánh /thoitiet ƒë·ªÉ th√™m th√†nh ph·ªë!';
        }

        let message = 'üìç **DANH S√ÅCH TH√ÄNH PH·ªê THEO D√ïI** üìç\n\n';
        
        cities.forEach((city, index) => {
            const notifyStatus = city.auto_notify ? 'üîî' : 'üîï';
            message += `${index + 1}. ${notifyStatus} ${city.display_name}\n`;
        });

        message += `\nüìä T·ªïng: ${cities.length}/10 th√†nh ph·ªë`;
        message += '\n\nüí° S·ª≠ d·ª•ng /thoitiet ƒë·ªÉ qu·∫£n l√Ω danh s√°ch!';

        return message;
    }
}

module.exports = new WeatherStorage();
