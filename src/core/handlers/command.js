const logger = require("../../utils/logger");

const Users = require("../controllers/users");
const Threads = require("../controllers/threads");

async function handleCommand(messageText, event = null, api = null, threadInfo = null, prefix = null) {
  const config = global.config;

  if (!messageText || typeof messageText !== "string") return;

  const threadId = event?.threadId;
  const type = event?.type;
  const UIDUsage = event?.data?.uidFrom || event?.senderID;

  if (type === "User" && config.allow_private_command === false) {
    return;
  }

  const args = messageText.slice(prefix.length).trim().split(/\s+/);
  const commandName = args.shift().toLowerCase();

  const command = global.client.commands.get(commandName);
  if (!command) {
    if (api && threadId) {
      api.sendMessage({
        msg: "‚ö†Ô∏è L·ªánh kh√¥ng t·ªìn t·∫°i!",
        ttl: 20000  // T·ª± x√≥a sau 20 gi√¢y
      }, threadId, type);
    }
    return;
  }

  const role = command.config.role || 0;
  const isBotAdmin = global.users?.admin?.includes(UIDUsage);
  const isSupport = global.users?.support?.includes(UIDUsage);
  
  let isGroupAdmin = false;

  if (type == 1) {
    if (threadInfo.box_only) {
      try {
        const info = await api.getThreadInfo(threadId);

        console.log(info);

        const isCreator = info.creatorId === event.senderID;
        const isDeputy = Array.isArray(info.adminIds) && info.adminIds.includes(event.senderID);

        isGroupAdmin = isCreator || isDeputy;
      } catch (err) {
        logger.log("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin nh√≥m t·ª´ API: " + err.message, "warn");
      }
    }

    if (threadInfo.admin_only && !isBotAdmin) {
      return api.sendMessage({
        msg: "‚ùå Nh√≥m ƒë√£ b·∫≠t ch·∫ø ƒë·ªô ch·ªâ admin bot ƒë√πng ƒë∆∞·ª£c l·ªánh.",
        ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
      }, threadId, type);
    }

    if (threadInfo.support_only && !isSupport && !isBotAdmin) {
      return api.sendMessage({
        msg: "‚ùå Nh√≥m ƒë√£ b·∫≠t ch·∫ø ƒë·ªô ch·ªâ support bot ho·∫∑c admin bot ƒë√πng ƒë∆∞·ª£c l·ªánh.",
        ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
      }, threadId, type);
    }

    if (threadInfo.box_only && !isGroupAdmin && !isBotAdmin) {
      return api.sendMessage({
        msg: "‚ùå Nh√≥m ƒë√£ b·∫≠t ch·∫ø ƒë·ªô ch·ªâ tr∆∞·ªüng nh√≥m ho·∫∑c ph√≥ nh√≥m ƒë√πng ƒë∆∞·ª£c l·ªánh.",
        ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
      }, threadId, type);
    }
  }

  if ((role === 2 && !isBotAdmin) || (role === 1 && !isBotAdmin && !isSupport)) {
    return api.sendMessage({
      msg: "üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.",
      ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
    }, threadId, type);
  }

  const cdTime = (command.config.cooldowns || 0) * 1000;

  if (!global.client.cooldowns.has(commandName)) {
    global.client.cooldowns.set(commandName, new Map());
  }

  const cdMap = global.client.cooldowns.get(commandName);
  const lastUsed = cdMap.get(threadId);

  if (lastUsed && Date.now() - lastUsed < cdTime) {
    const timeLeft = ((cdTime - (Date.now() - lastUsed)) / 1000).toFixed(1);
    return api.sendMessage({
      msg: `‚è≥ Vui l√≤ng ch·ªù ${timeLeft}s ƒë·ªÉ d√πng l·∫°i l·ªánh '${commandName}'`,
      ttl: 15000  // T·ª± x√≥a sau 15 gi√¢y (cooldown message)
    }, threadId, type);
  }

  cdMap.set(threadId, Date.now());

  try {
    command.run({ args, event, api, Users, Threads });
  } catch (err) {
    logger.log("‚ùå L·ªói khi x·ª≠ l√Ω l·ªánh: " + err.message, "error");
    return api.sendMessage({
      msg: "‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω l·ªánh!",
      ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
    }, threadId, type);
  }
}


module.exports = handleCommand;
