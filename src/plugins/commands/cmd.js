const path = require("path");
const fs = require("fs");
const { execSync } = require("child_process");

module.exports.config = {
    name: "cmd",
    version: "1.0.0",
    role: 2,
    author: "Soulmate",
    description: "Qu·∫£n l√Ω v√† ki·ªÉm so√°t c√°c plugin l·ªánh c·ªßa bot.",
    category: "H·ªá th·ªëng",
    usage: ".cmd <load|unload|loadall|unloadall|list|info> [t√™n l·ªánh]",
    cooldowns: 2
};

async function loadModule(api, event, moduleName) {
    const { threadId, type } = event;
    const commandPath = path.join(__dirname, `${moduleName}.js`);
    try {
        if (!fs.existsSync(commandPath)) {
            return api.sendMessage({
                msg: `Kh√¥ng t√¨m th·∫•y plugin '${moduleName}'.`,
                ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
            }, threadId, type);
        }

        delete require.cache[require.resolve(commandPath)];
        const command = require(commandPath);

        if (!command.config || !command.config.name || typeof command.run !== "function") {
            return api.sendMessage({
                msg: `L·ªánh '${moduleName}' kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu th√¥ng tin.`,
                ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
            }, threadId, type);
        }

        const dependencies = command.config.dependencies || {};
        let installedNewDep = false;

        for (const [pkgName, version] of Object.entries(dependencies)) {
            try {
                require.resolve(pkgName);
            } catch {
                api.sendMessage({
                    msg: `üîÑ ƒêang c√†i package: ${pkgName}@${version || "latest"}`,
                    ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
                }, threadId, type);
                try {
                    execSync(`npm install ${pkgName}@${version || "latest"}`, {
                        stdio: "inherit",
                        cwd: path.join(__dirname, "../../../")
                    });
                    installedNewDep = true;
                } catch (err) {
                    return api.sendMessage({
                        msg: `‚ùå L·ªói khi c√†i ${pkgName}: ${err.message}`,
                        ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
                    }, threadId, type);
                }
            }
        }

        const name = command.config.name.toLowerCase();
        global.client.commands.set(name, command);

        if (typeof command.onLoad === "function") {
            try {
                command.onLoad({ api });
            } catch (e) {
                api.sendMessage({
                    msg: `‚ö†Ô∏è L·ªói trong onLoad c·ªßa ${name}: ${e.message}`,
                    ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
                }, threadId, type);
            }
        }

        if (installedNewDep) {
            api.sendMessage({
                msg: "üîÅ ƒê√£ c√†i th√™m package. Bot s·∫Ω kh·ªüi ƒë·ªông l·∫°i ƒë·ªÉ √°p d·ª•ng...",
                ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
            }, threadId, type);
            process.exit(2);
        } else {
            api.sendMessage({
                msg: `‚úÖ ƒê√£ t·∫£i l·ªánh '${moduleName}' th√†nh c√¥ng.`,
                ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
            }, threadId, type);
        }

    } catch (error) {
        console.error(`L·ªói khi t·∫£i l·ªánh ${moduleName}:`, error);
        return api.sendMessage({
            msg: `‚ùå L·ªói khi t·∫£i l·ªánh '${moduleName}':\n${error.message}`,
            ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
        }, threadId, type);
    }
}

async function unloadModule(api, event, moduleName) {
    const { threadId, type } = event;
    if (!global.client.commands.has(moduleName)) {
        return api.sendMessage({
            msg: `L·ªánh '${moduleName}' ch∆∞a ƒë∆∞·ª£c t·∫£i.`,
            ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
        }, threadId, type);
    }
    global.client.commands.delete(moduleName);
    const commandPath = path.join(__dirname, `${moduleName}.js`);
    delete require.cache[require.resolve(commandPath)];
    return api.sendMessage({
        msg: `‚úÖ ƒê√£ g·ª° th√†nh c√¥ng l·ªánh '${moduleName}'.`,
        ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
    }, threadId, type);
}

module.exports.run = async function({ api, event, args }) {
    const { threadId, type } = event;

    if (!global.users.admin.includes(event.data.uidFrom)) {
        return api.sendMessage({
            msg: "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.",
            ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
        }, threadId, type);
    }

    const action = args[0]?.toLowerCase();
    const moduleName = args[1];

    switch (action) {
        case "load":
            if (!moduleName) return api.sendMessage({
                msg: "Vui l√≤ng nh·∫≠p t√™n l·ªánh c·∫ßn t·∫£i.",
                ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
            }, threadId, type);
            await loadModule(api, event, moduleName);
            break;

        case "unload":
            if (!moduleName) return api.sendMessage({
                msg: "Vui l√≤ng nh·∫≠p t√™n l·ªánh c·∫ßn g·ª°.",
                ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
            }, threadId, type);
            await unloadModule(api, event, moduleName);
            break;

        case "loadall":
            try {
                await api.sendMessage({
                    msg: "üîÑ B·∫Øt ƒë·∫ßu t·∫£i l·∫°i t·∫•t c·∫£ l·ªánh...",
                    ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
                }, threadId, type);
                Object.keys(require.cache).forEach(key => {
                    if (key.startsWith(__dirname)) delete require.cache[key];
                });
                global.client.commands.clear();
                const loaderCommand = require("../../core/loaders/command");
                await loaderCommand();
                await api.sendMessage({
                    msg: `‚úÖ ƒê√£ t·∫£i l·∫°i th√†nh c√¥ng ${global.client.commands.size} l·ªánh.`,
                    ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
                }, threadId, type);
            } catch (error) {
                console.error("L·ªói khi loadall:", error);
                await api.sendMessage({
                    msg: `‚ùå L·ªói khi t·∫£i l·∫°i l·ªánh:\n${error.message}`,
                    ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
                }, threadId, type);
            }
            break;

        case "unloadall":
            try {
                const files = fs.readdirSync(__dirname).filter(f => f.endsWith(".js") && f !== "cmd.js");
                let count = 0;
                for (const file of files) {
                    const name = file.replace(".js", "");
                    if (global.client.commands.has(name)) {
                        global.client.commands.delete(name);
                        delete require.cache[require.resolve(path.join(__dirname, file))];
                        count++;
                    }
                }
                await api.sendMessage({
                    msg: `‚úÖ ƒê√£ g·ª° ${count} l·ªánh th√†nh c√¥ng.`,
                    ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
                }, threadId, type);
            } catch (error) {
                console.error("L·ªói khi g·ª°:", error);
                await api.sendMessage({
                    msg: `‚ùå L·ªói khi g·ª° l·ªánh:\n${error.message}`,
                    ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
                }, threadId, type);
            }
            break;

        case "list":
            const list = Array.from(global.client.commands.keys());
            api.sendMessage({
                msg: `üì¶ Hi·ªán c√≥ ${list.length} l·ªánh ƒëang ho·∫°t ƒë·ªông:\n${list.join(", ")}`,
                ttl: 60000  // T·ª± x√≥a sau 60 gi√¢y (danh s√°ch d√†i)
            }, threadId, type);
            break;

        case "info":
            if (!moduleName) return api.sendMessage({
                msg: "Vui l√≤ng nh·∫≠p t√™n l·ªánh c·∫ßn xem th√¥ng tin.",
                ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
            }, threadId, type);
            const cmd = global.client.commands.get(moduleName);
            if (!cmd) return api.sendMessage({
                msg: `L·ªánh '${moduleName}' ch∆∞a ƒë∆∞·ª£c t·∫£i ho·∫∑c kh√¥ng t·ªìn t·∫°i.`,
                ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
            }, threadId, type);
            const config = cmd.config;
            const roleText = config.role === 0 ? "Ng∆∞·ªùi d√πng" : config.role === 1 ? "Support" : "Admin";
            const depsText = config.dependencies ? Object.keys(config.dependencies).join(", ") : "Kh√¥ng c√≥";

            const msg = `üîé Th√¥ng tin l·ªánh: ${config.name}\n\n` +
                        `- M√¥ t·∫£: ${config.description}\n` +
                        `- T√°c gi·∫£: ${config.author}\n` +
                        `- Phi√™n b·∫£n: ${config.version}\n` +
                        `- Quy·ªÅn h·∫°n: ${roleText}\n` +
                        `- C√°ch d√πng: ${config.usage}\n` +
                        `- Dependencies: ${depsText}`;
            api.sendMessage({
                msg: msg,
                ttl: 60000  // T·ª± x√≥a sau 60 gi√¢y
            }, threadId, type);
            break;

        default:
            api.sendMessage({
                msg: "üìö Qu·∫£n l√Ω module bot\n\n" +
                "cmd load <l·ªánh> - T·∫£i m·ªôt l·ªánh\n" +
                "cmd unload <l·ªánh> - G·ª° m·ªôt l·ªánh\n" +
                "cmd loadall - T·∫£i l·∫°i t·∫•t c·∫£ l·ªánh\n" +
                "cmd unloadall - G·ª° t·∫•t c·∫£ l·ªánh\n" +
                "cmd list - Li·ªát k√™ c√°c l·ªánh\n" +
                "cmd info <l·ªánh> - Xem th√¥ng tin l·ªánh",
                ttl: 60000  // T·ª± x√≥a sau 60 gi√¢y
            }, threadId, type);
            break;
    }
};
