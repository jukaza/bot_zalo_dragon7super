const weatherAPI = require('../../utils/weather/api');
const weatherStorage = require('../../utils/weather/storage');
const weatherScheduler = require('../../utils/weather/scheduler');

module.exports.config = {
    name: "weatheradmin",
    version: "1.0.0",
    role: 2, // Admin only
    author: "Dragon7 Bot Team",
    description: "Qu·∫£n l√Ω h·ªá th·ªëng th·ªùi ti·∫øt (Admin only)",
    category: "Admin",
    usage: "weatheradmin [test|validate|stats|send] [userId]",
    cooldowns: 5,
    dependencies: {}
};

module.exports.run = async ({ args, event, api }) => {
    const { threadId, type } = event;
    const userId = event.data.uidFrom;

    // Ki·ªÉm tra quy·ªÅn admin
    if (!global.users.admin.includes(userId)) {
        return api.sendMessage("üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", threadId, type);
    }

    const action = args[0]?.toLowerCase();

    try {
        switch (action) {
            case 'test':
                await handleTestWeather(args[1] || userId, api, threadId, type);
                break;
            
            case 'validate':
                await handleValidateAPI(api, threadId, type);
                break;
            
            case 'stats':
                await handleShowStats(api, threadId, type);
                break;
            
            case 'send':
                await handleForceSend(api, threadId, type);
                break;
            
            case 'jobs':
                await handleShowJobs(api, threadId, type);
                break;
            
            default:
                await showAdminMenu(api, threadId, type);
                break;
        }
    } catch (error) {
        console.error('L·ªói trong weatheradmin:', error);
        api.sendMessage(`‚ùå C√≥ l·ªói x·∫£y ra: ${error.message}`, threadId, type);
    }
};

/**
 * Hi·ªÉn th·ªã menu admin
 */
async function showAdminMenu(api, threadId, type) {
    const menu = `üîß **WEATHER ADMIN PANEL** üîß\n\n` +
                 `üìã **C√°c l·ªánh c√≥ s·∫µn:**\n\n` +
                 `üß™ /weatheradmin test [userId]\n` +
                 `   ‚îî Test g·ª≠i th·ªùi ti·∫øt cho user\n\n` +
                 `‚úÖ /weatheradmin validate\n` +
                 `   ‚îî Ki·ªÉm tra API key c√≥ h·ª£p l·ªá\n\n` +
                 `üìä /weatheradmin stats\n` +
                 `   ‚îî Xem th·ªëng k√™ h·ªá th·ªëng\n\n` +
                 `üì§ /weatheradmin send\n` +
                 `   ‚îî G·ª≠i th·ªùi ti·∫øt ngay l·∫≠p t·ª©c cho t·∫•t c·∫£ users\n\n` +
                 `‚è∞ /weatheradmin jobs\n` +
                 `   ‚îî Xem th√¥ng tin scheduled jobs\n\n` +
                 `üí° **L∆∞u √Ω:** Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng!`;

    return api.sendMessage(menu, threadId, type);
}

/**
 * Test g·ª≠i th·ªùi ti·∫øt cho user
 */
async function handleTestWeather(targetUserId, api, threadId, type) {
    try {
        api.sendMessage("üß™ ƒêang test g·ª≠i th·ªùi ti·∫øt...", threadId, type);
        
        const result = await weatherScheduler.sendTestWeather(targetUserId);
        
        const message = result.success ? 
            `‚úÖ Test th√†nh c√¥ng!\n${result.message}` : 
            `‚ùå Test th·∫•t b·∫°i!\n${result.message}`;
        
        return api.sendMessage(message, threadId, type);
    } catch (error) {
        return api.sendMessage(`‚ùå L·ªói khi test: ${error.message}`, threadId, type);
    }
}

/**
 * Ki·ªÉm tra API key
 */
async function handleValidateAPI(api, threadId, type) {
    try {
        api.sendMessage("üîç ƒêang ki·ªÉm tra API key...", threadId, type);
        
        const isValid = await weatherAPI.validateApiKey();
        
        const message = isValid ? 
            "‚úÖ API key h·ª£p l·ªá! H·ªá th·ªëng th·ªùi ti·∫øt ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng." : 
            "‚ùå API key kh√¥ng h·ª£p l·ªá! Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh.";
        
        return api.sendMessage(message, threadId, type);
    } catch (error) {
        return api.sendMessage(`‚ùå L·ªói khi ki·ªÉm tra API: ${error.message}`, threadId, type);
    }
}

/**
 * Hi·ªÉn th·ªã th·ªëng k√™ h·ªá th·ªëng
 */
async function handleShowStats(api, threadId, type) {
    try {
        const usersWithNotify = await weatherStorage.getAllUsersWithAutoNotify();
        
        let totalCities = 0;
        let activeUsers = 0;
        
        for (const user of usersWithNotify) {
            if (user.cities && user.cities.length > 0) {
                activeUsers++;
                totalCities += user.cities.length;
            }
        }
        
        const stats = `üìä **TH·ªêNG K√ä H·ªÜ TH·ªêNG TH·ªúI TI·∫æT** üìä\n\n` +
                     `üë• **Users ƒëang s·ª≠ d·ª•ng:** ${activeUsers}\n` +
                     `üèôÔ∏è **T·ªïng s·ªë th√†nh ph·ªë:** ${totalCities}\n` +
                     `üîî **Users b·∫≠t th√¥ng b√°o:** ${usersWithNotify.length}\n` +
                     `‚öôÔ∏è **API Provider:** ${global.config.weather_api?.provider || 'Ch∆∞a c·∫•u h√¨nh'}\n` +
                     `üåê **Ng√¥n ng·ªØ:** ${global.config.weather_api?.default_lang || 'vi'}\n` +
                     `‚è±Ô∏è **Cache duration:** ${global.config.weather_api?.cache_duration || 300}s\n\n` +
                     `üìà **Trung b√¨nh:** ${activeUsers > 0 ? (totalCities / activeUsers).toFixed(1) : 0} th√†nh ph·ªë/user`;
        
        return api.sendMessage(stats, threadId, type);
    } catch (error) {
        return api.sendMessage(`‚ùå L·ªói khi l·∫•y th·ªëng k√™: ${error.message}`, threadId, type);
    }
}

/**
 * G·ª≠i th·ªùi ti·∫øt ngay l·∫≠p t·ª©c
 */
async function handleForceSend(api, threadId, type) {
    try {
        api.sendMessage("üì§ ƒêang g·ª≠i th·ªùi ti·∫øt cho t·∫•t c·∫£ users...", threadId, type);
        
        await weatherScheduler.sendDailyWeatherNotifications();
        
        return api.sendMessage("‚úÖ ƒê√£ g·ª≠i th·ªùi ti·∫øt th√†nh c√¥ng!", threadId, type);
    } catch (error) {
        return api.sendMessage(`‚ùå L·ªói khi g·ª≠i th·ªùi ti·∫øt: ${error.message}`, threadId, type);
    }
}

/**
 * Hi·ªÉn th·ªã th√¥ng tin jobs
 */
async function handleShowJobs(api, threadId, type) {
    try {
        const jobs = weatherScheduler.getJobsInfo();
        
        let message = `‚è∞ **TH√îNG TIN SCHEDULED JOBS** ‚è∞\n\n`;
        
        if (jobs.length === 0) {
            message += "‚ùå Kh√¥ng c√≥ job n√†o ƒëang ch·∫°y!";
        } else {
            jobs.forEach((job, index) => {
                const nextRun = job.nextInvocation ? 
                    job.nextInvocation.toLocaleString('vi-VN') : 
                    'Kh√¥ng x√°c ƒë·ªãnh';
                
                message += `${index + 1}. **${job.name}**\n`;
                message += `   ‚îî Ch·∫°y ti·∫øp theo: ${nextRun}\n\n`;
            });
        }
        
        return api.sendMessage(message, threadId, type);
    } catch (error) {
        return api.sendMessage(`‚ùå L·ªói khi l·∫•y th√¥ng tin jobs: ${error.message}`, threadId, type);
    }
}
