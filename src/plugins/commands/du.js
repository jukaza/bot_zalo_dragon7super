const fs = require('fs');
const path = require('path');
const axios = require('axios');

module.exports.config = {
  name: "d√∫",
  version: "1.0.0",
  role: 0,
  author: "Assistant",
  description: "G·ª≠i ·∫£nh ng·∫´u nhi√™n t·ª´ th∆∞ m·ª•c d√∫. S·ª≠ d·ª•ng 'd√∫ on/off' ƒë·ªÉ b·∫≠t/t·∫Øt",
  category: "Gi·∫£i tr√≠",
  usage: "d√∫ [on/off] [anime/cosplay/girl/girlsexy/girlv1]",
  cooldowns: 3
};

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c ch·ª©a c√°c file txt
const duPath = path.join(__dirname, '../../../assets/images');

// Danh s√°ch c√°c lo·∫°i ·∫£nh c√≥ s·∫µn
const imageTypes = ['anime', 'cosplay', 'girl', 'girlsexy', 'girlv1'];

// H√†m ƒë·ªçc link ·∫£nh t·ª´ file txt
function getImageLinks(type) {
  const filePath = path.join(duPath, `${type}.txt`);
  if (!fs.existsSync(filePath)) {
    return [];
  }
  
  const content = fs.readFileSync(filePath, 'utf8');
  return content.split('\n').filter(line => line.trim() && line.startsWith('http'));
}

// H√†m l·∫•y ·∫£nh ng·∫´u nhi√™n
function getRandomImage(type = null) {
  let selectedType = type;
  
  // N·∫øu kh√¥ng ch·ªâ ƒë·ªãnh lo·∫°i, ch·ªçn ng·∫´u nhi√™n
  if (!selectedType || !imageTypes.includes(selectedType)) {
    selectedType = imageTypes[Math.floor(Math.random() * imageTypes.length)];
  }
  
  const links = getImageLinks(selectedType);
  if (links.length === 0) {
    return null;
  }
  
  const randomLink = links[Math.floor(Math.random() * links.length)];
  return { link: randomLink, type: selectedType };
}

// H√†m t·∫£i ·∫£nh v√† t·∫°o file t·∫°m
async function downloadImage(imageUrl) {
  try {
    const response = await axios.get(imageUrl, { 
      responseType: 'arraybuffer',
      timeout: 10000 
    });
    
    const tempDir = path.join(__dirname, 'temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    const fileName = `du_${Date.now()}.jpg`;
    const filePath = path.join(tempDir, fileName);
    
    fs.writeFileSync(filePath, response.data);
    return filePath;
  } catch (error) {
    console.error('L·ªói khi t·∫£i ·∫£nh:', error.message);
    return null;
  }
}

module.exports.run = async function({ api, event, args, Threads }) {
  const { threadId, type } = event;
  const senderID = event.data?.uidFrom || event.senderID;

  try {
    // L·∫•y d·ªØ li·ªáu nh√≥m
    const threadData = await Threads.getData(threadId);
    let groupData = threadData.data || {};

    // X·ª≠ l√Ω l·ªánh on/off
    if (args[0] && (args[0].toLowerCase() === 'on' || args[0].toLowerCase() === 'off')) {
      const action = args[0].toLowerCase();

      // Ki·ªÉm tra quy·ªÅn admin ho·∫∑c support (convert to string ƒë·ªÉ ƒë·∫£m b·∫£o match)
      const senderIDStr = String(senderID);
      const isBotAdmin = global.users?.admin?.includes(senderIDStr);
      const isSupport = global.users?.support?.includes(senderIDStr);

      // Debug log
      console.log('Debug du.js:', {
        senderID,
        senderIDStr,
        adminList: global.users?.admin,
        supportList: global.users?.support,
        isBotAdmin,
        isSupport
      });

      if (!isBotAdmin && !isSupport) {
        return api.sendMessage({
          msg: 'üö´ Ch·ªâ admin ho·∫∑c support bot m·ªõi c√≥ th·ªÉ b·∫≠t/t·∫Øt ch·ª©c nƒÉng d√∫!',
          ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
        }, threadId, type);
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i d√∫
      groupData.du_enabled = (action === 'on');

      // L∆∞u v√†o database
      await Threads.setData(threadId, groupData);

      const statusText = action === 'on' ? 'b·∫≠t' : 't·∫Øt';
      return api.sendMessage({
        msg: `‚úÖ ƒê√£ ${statusText} ch·ª©c nƒÉng d√∫ cho nh√≥m n√†y!`,
        ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
      }, threadId, type);
    }
    
    // Ki·ªÉm tra xem ch·ª©c nƒÉng c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng (m·∫∑c ƒë·ªãnh l√† t·∫Øt)
    if (groupData.du_enabled !== true) {
      return api.sendMessage({
        msg: '‚ùå Ch·ª©c nƒÉng d√∫ ƒëang t·∫Øt!\n\n' +
             'üí° S·ª≠ d·ª•ng "d√∫ on" ƒë·ªÉ b·∫≠t ch·ª©c nƒÉng\n' +
             'üí° S·ª≠ d·ª•ng "d√∫ off" ƒë·ªÉ t·∫Øt ch·ª©c nƒÉng',
        ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
      }, threadId, type);
    }
    
    // L·∫•y lo·∫°i ·∫£nh t·ª´ args (n·∫øu c√≥)
    const requestedType = args[0] ? args[0].toLowerCase() : null;
    
    // Ki·ªÉm tra lo·∫°i ·∫£nh c√≥ h·ª£p l·ªá kh√¥ng
    if (requestedType && !imageTypes.includes(requestedType)) {
      return api.sendMessage({
        msg: `‚ùå Lo·∫°i ·∫£nh kh√¥ng h·ª£p l·ªá!\n\n` +
             `üìã C√°c lo·∫°i c√≥ s·∫µn: ${imageTypes.join(', ')}\n` +
             `üí° S·ª≠ d·ª•ng: d√∫ [${imageTypes.join('|')}]`,
        ttl: 30000  // T·ª± x√≥a sau 30 gi√¢y
      }, threadId, type);
    }
    
    // L·∫•y ·∫£nh ng·∫´u nhi√™n
    const imageData = getRandomImage(requestedType);
    if (!imageData) {
      return api.sendMessage({
        msg: '‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o!',
        ttl: 20000  // T·ª± x√≥a sau 20 gi√¢y
      }, threadId, type);
    }

    // T·∫£i ·∫£nh
    const imagePath = await downloadImage(imageData.link);
    if (!imagePath) {
      return api.sendMessage({
        msg: '‚ùå Kh√¥ng th·ªÉ t·∫£i ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i!',
        ttl: 20000  // T·ª± x√≥a sau 20 gi√¢y
      }, threadId, type);
    }
    
    // G·ª≠i ·∫£nh v·ªõi TTL t·ª± x√≥a sau 60 gi√¢y (60000ms) - ch·ªâ ·∫£nh kh√¥ng c√≥ text
    await api.sendMessage({
      msg: "",
      attachments: [imagePath],
      ttl: 60000  // Tin nh·∫Øn t·ª± x√≥a sau 60 gi√¢y
    }, threadId, type);
    
    // X√≥a file t·∫°m sau khi g·ª≠i
    setTimeout(() => {
      try {
        if (fs.existsSync(imagePath)) {
          fs.unlinkSync(imagePath);
        }
      } catch (error) {
        console.error('L·ªói khi x√≥a file t·∫°m:', error.message);
      }
    }, 5000);
    
  } catch (error) {
    console.error('L·ªói trong command d√∫:', error);
    api.sendMessage({
      msg: '‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ªánh!',
      ttl: 20000  // T·ª± x√≥a sau 20 gi√¢y
    }, threadId, type);
  }
};
