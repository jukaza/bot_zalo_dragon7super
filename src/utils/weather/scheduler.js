const schedule = require('node-schedule');
const weatherAPI = require('./api');
const weatherStorage = require('./storage');
const logger = require('../logger');

class WeatherScheduler {
    constructor() {
        this.api = null;
        this.jobs = new Map();
    }

    /**
     * Kh·ªüi t·∫°o scheduler v·ªõi API instance
     * @param {Object} api - ZCA API instance
     */
    init(api) {
        this.api = api;

        // Kh·ªüi t·∫°o weatherAPI v·ªõi config
        weatherAPI.init();

        this.setupDailyWeatherJob();
        this.setupCacheCleanupJob();
        logger.log("Weather scheduler ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o", "info");
    }

    /**
     * Thi·∫øt l·∫≠p job g·ª≠i th·ªùi ti·∫øt h√†ng ng√†y
     */
    setupDailyWeatherJob() {
        // Ch·∫°y l√∫c 6:00 AM m·ªói ng√†y (gi·ªù Vi·ªát Nam)
        const job = schedule.scheduleJob('0 6 * * *', async () => {
            logger.log("B·∫Øt ƒë·∫ßu g·ª≠i th·ªùi ti·∫øt t·ª± ƒë·ªông 6h s√°ng", "info");
            await this.sendDailyWeatherNotifications();
        });

        this.jobs.set('daily_weather', job);
        logger.log("ƒê√£ thi·∫øt l·∫≠p job g·ª≠i th·ªùi ti·∫øt h√†ng ng√†y l√∫c 6:00 AM", "info");
    }

    /**
     * Thi·∫øt l·∫≠p job d·ªçn d·∫πp cache
     */
    setupCacheCleanupJob() {
        // D·ªçn d·∫πp cache m·ªói 30 ph√∫t
        const job = schedule.scheduleJob('*/30 * * * *', () => {
            weatherAPI.clearOldCache();
            logger.log("ƒê√£ d·ªçn d·∫πp cache th·ªùi ti·∫øt", "info");
        });

        this.jobs.set('cache_cleanup', job);
        logger.log("ƒê√£ thi·∫øt l·∫≠p job d·ªçn d·∫πp cache m·ªói 30 ph√∫t", "info");
    }

    /**
     * G·ª≠i th√¥ng b√°o th·ªùi ti·∫øt h√†ng ng√†y cho t·∫•t c·∫£ users
     */
    async sendDailyWeatherNotifications() {
        try {
            if (!this.api) {
                logger.log("API ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o cho weather scheduler", "error");
                return;
            }

            // Ki·ªÉm tra c·∫•u h√¨nh API
            if (!global.config.weather_api || !global.config.weather_api.api_key || 
                global.config.weather_api.api_key === "YOUR_API_KEY_HERE") {
                logger.log("Weather API ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh", "warn");
                return;
            }

            const usersWithNotify = weatherStorage.getAllUsersWithAutoNotify();
            
            if (usersWithNotify.length === 0) {
                logger.log("Kh√¥ng c√≥ user n√†o b·∫≠t th√¥ng b√°o th·ªùi ti·∫øt t·ª± ƒë·ªông", "info");
                return;
            }

            logger.log(`B·∫Øt ƒë·∫ßu g·ª≠i th·ªùi ti·∫øt cho ${usersWithNotify.length} users`, "info");

            let successCount = 0;
            let errorCount = 0;

            for (const user of usersWithNotify) {
                try {
                    await this.sendWeatherToUser(user);
                    successCount++;
                    
                    // Delay gi·ªØa c√°c l·∫ßn g·ª≠i ƒë·ªÉ tr√°nh spam
                    await this.delay(2000);
                } catch (error) {
                    logger.log(`L·ªói khi g·ª≠i th·ªùi ti·∫øt cho user ${user.userId}: ${error.message}`, "error");
                    errorCount++;
                }
            }

            logger.log(`Ho√†n th√†nh g·ª≠i th·ªùi ti·∫øt: ${successCount} th√†nh c√¥ng, ${errorCount} l·ªói`, "info");

        } catch (error) {
            logger.log(`L·ªói trong sendDailyWeatherNotifications: ${error.message}`, "error");
        }
    }

    /**
     * G·ª≠i th·ªùi ti·∫øt cho m·ªôt user c·ª• th·ªÉ
     * @param {Object} user - Th√¥ng tin user v√† cities
     */
    async sendWeatherToUser(user) {
        try {
            const { userId, cities } = user;
            
            if (!cities || cities.length === 0) {
                return;
            }

            let weatherMessages = [];
            
            // L·∫•y th·ªùi ti·∫øt cho t·ª´ng th√†nh ph·ªë
            for (const city of cities) {
                try {
                    const weather = await weatherAPI.getCurrentWeather(city.lat, city.lon);
                    const shortMessage = this.formatShortWeatherMessage(weather);
                    weatherMessages.push(shortMessage);
                    
                    // Delay nh·ªè gi·ªØa c√°c API calls
                    await this.delay(500);
                } catch (error) {
                    logger.log(`L·ªói khi l·∫•y th·ªùi ti·∫øt cho ${city.display_name}: ${error.message}`, "error");
                    weatherMessages.push(`‚ùå ${city.display_name}: Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu`);
                }
            }

            if (weatherMessages.length === 0) {
                return;
            }

            // T·∫°o tin nh·∫Øn t·ªïng h·ª£p
            const finalMessage = this.createDailyWeatherSummary(weatherMessages);
            
            // G·ª≠i tin nh·∫Øn cho user (private message)
            await this.api.sendMessage(finalMessage, userId, "User");
            
            logger.log(`ƒê√£ g·ª≠i th·ªùi ti·∫øt cho user ${userId} (${cities.length} th√†nh ph·ªë)`, "info");

        } catch (error) {
            throw new Error(`L·ªói khi g·ª≠i th·ªùi ti·∫øt cho user ${user.userId}: ${error.message}`);
        }
    }

    /**
     * Format tin nh·∫Øn th·ªùi ti·∫øt ng·∫Øn g·ªçn
     * @param {Object} weather - Th√¥ng tin th·ªùi ti·∫øt
     * @returns {string} - Tin nh·∫Øn ng·∫Øn g·ªçn
     */
    formatShortWeatherMessage(weather) {
        return `üå§Ô∏è **${weather.city}**: ${weather.temperature}¬∞C, ${weather.description}`;
    }

    /**
     * T·∫°o tin nh·∫Øn t·ªïng h·ª£p th·ªùi ti·∫øt h√†ng ng√†y
     * @param {Array} weatherMessages - Danh s√°ch tin nh·∫Øn th·ªùi ti·∫øt
     * @returns {string} - Tin nh·∫Øn t·ªïng h·ª£p
     */
    createDailyWeatherSummary(weatherMessages) {
        const now = new Date();
        const dateStr = now.toLocaleDateString('vi-VN', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        let message = `üåÖ **B√ÅO C√ÅO TH·ªúI TI·∫æT H√ÄNG NG√ÄY** üåÖ\n`;
        message += `üìÖ ${dateStr}\n\n`;
        
        weatherMessages.forEach(msg => {
            message += `${msg}\n`;
        });

        message += `\n‚è∞ C·∫≠p nh·∫≠t l√∫c: ${now.toLocaleTimeString('vi-VN')}`;
        message += `\nüí° S·ª≠ d·ª•ng /thoitiet ƒë·ªÉ qu·∫£n l√Ω danh s√°ch th√†nh ph·ªë`;

        return message;
    }

    /**
     * Delay function
     * @param {number} ms - Milliseconds to delay
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * G·ª≠i th·ªùi ti·∫øt ngay l·∫≠p t·ª©c cho test
     * @param {string} userId - ID c·ªßa user ƒë·ªÉ test
     */
    async sendTestWeather(userId) {
        try {
            const cities = weatherStorage.getUserCities(userId);
            
            if (cities.length === 0) {
                return { success: false, message: "User ch∆∞a c√≥ th√†nh ph·ªë n√†o trong danh s√°ch" };
            }

            const user = {
                userId: userId,
                cities: cities.filter(city => city.auto_notify !== false)
            };

            await this.sendWeatherToUser(user);
            return { success: true, message: `ƒê√£ g·ª≠i th·ªùi ti·∫øt test cho ${cities.length} th√†nh ph·ªë` };

        } catch (error) {
            logger.log(`L·ªói khi g·ª≠i test weather: ${error.message}`, "error");
            return { success: false, message: error.message };
        }
    }

    /**
     * L·∫•y th√¥ng tin v·ªÅ c√°c jobs ƒëang ch·∫°y
     */
    getJobsInfo() {
        const info = [];
        for (const [name, job] of this.jobs.entries()) {
            info.push({
                name: name,
                nextInvocation: job.nextInvocation()
            });
        }
        return info;
    }

    /**
     * H·ªßy t·∫•t c·∫£ jobs
     */
    cancelAllJobs() {
        for (const [name, job] of this.jobs.entries()) {
            job.cancel();
            logger.log(`ƒê√£ h·ªßy job: ${name}`, "info");
        }
        this.jobs.clear();
    }

    /**
     * Kh·ªüi ƒë·ªông l·∫°i scheduler
     */
    restart() {
        this.cancelAllJobs();
        if (this.api) {
            this.setupDailyWeatherJob();
            this.setupCacheCleanupJob();
            logger.log("Weather scheduler ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫°i", "info");
        }
    }
}

module.exports = new WeatherScheduler();
