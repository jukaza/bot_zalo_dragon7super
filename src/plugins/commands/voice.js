const fs = require('fs');
const path = require('path');
const axios = require('axios');
const { ThreadType } = require('zca-js');

module.exports.config = {
  name: "voice",
  version: "1.0.0",
  role: 0,
  author: "Assistant",
  description: "G·ª≠i tin nh·∫Øn voice t·ª´ URL ho·∫∑c file local. S·ª≠ d·ª•ng 'voice on/off' ƒë·ªÉ b·∫≠t/t·∫Øt",
  category: "Gi·∫£i tr√≠",
  usage: "voice [on/off] [URL] ho·∫∑c voice [t√™n file]",
  cooldowns: 5
};

// C·∫•u h√¨nh
const CONFIG = {
  timeout: 15000, // Timeout cho vi·ªác t·∫£i voice
  maxFileSize: 10 * 1024 * 1024, // 10MB
  supportedFormats: ['.mp3', '.m4a', '.wav', '.ogg', '.aac'],
  voiceFolder: path.join(__dirname, '../../../assets/voices'), // Th∆∞ m·ª•c ch·ª©a file voice
};

// T·∫°o th∆∞ m·ª•c voice n·∫øu ch∆∞a c√≥
if (!fs.existsSync(CONFIG.voiceFolder)) {
  fs.mkdirSync(CONFIG.voiceFolder, { recursive: true });
}

// H√†m ki·ªÉm tra URL voice c√≥ h·ª£p l·ªá kh√¥ng
async function checkVoiceUrl(url) {
  try {
    const response = await axios.head(url, {
      timeout: CONFIG.timeout,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });
    
    const contentType = response.headers['content-type'] || '';
    const contentLength = parseInt(response.headers['content-length'] || '0');
    
    // Ki·ªÉm tra content type
    const isAudio = contentType.includes('audio/') || 
                   contentType.includes('application/octet-stream');
    
    // Ki·ªÉm tra k√≠ch th∆∞·ªõc file
    const isValidSize = contentLength > 0 && contentLength <= CONFIG.maxFileSize;
    
    return {
      isValid: isAudio && isValidSize,
      contentType,
      fileSize: contentLength,
      error: !isAudio ? 'Kh√¥ng ph·∫£i file audio' : 
             !isValidSize ? 'File qu√° l·ªõn (>10MB)' : null
    };
    
  } catch (error) {
    return {
      isValid: false,
      error: error.message
    };
  }
}

// H√†m g·ª≠i voice t·ª´ URL
async function sendVoiceFromUrl(api, event, voiceUrl) {
  try {
    console.log(`üéµ ƒêang g·ª≠i voice t·ª´ URL: ${voiceUrl}`);
    
    // Ki·ªÉm tra URL
    const urlCheck = await checkVoiceUrl(voiceUrl);
    if (!urlCheck.isValid) {
      return { success: false, error: urlCheck.error };
    }
    
    // G·ª≠i voice s·ª≠ d·ª•ng ZCA-JS API
    const result = await api.sendVoice({
      voiceUrl: voiceUrl,
      ttl: 300000 // 5 ph√∫t
    }, event.threadId, event.type);
    
    if (result && result.msgId) {
      console.log(`‚úÖ ƒê√£ g·ª≠i voice th√†nh c√¥ng t·ª´ URL`);
      return { success: true };
    } else {
      return { success: false, error: 'Kh√¥ng th·ªÉ g·ª≠i voice' };
    }
    
  } catch (error) {
    console.error(`‚ùå L·ªói khi g·ª≠i voice t·ª´ URL: ${error.message}`);
    return { success: false, error: error.message };
  }
}

// H√†m g·ª≠i voice t·ª´ file local
async function sendVoiceFromFile(api, event, fileName) {
  try {
    const filePath = path.join(CONFIG.voiceFolder, fileName);
    
    // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
    if (!fs.existsSync(filePath)) {
      return { success: false, error: 'File kh√¥ng t·ªìn t·∫°i' };
    }
    
    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
    const fileExt = path.extname(fileName).toLowerCase();
    if (!CONFIG.supportedFormats.includes(fileExt)) {
      return { success: false, error: `ƒê·ªãnh d·∫°ng kh√¥ng h·ªó tr·ª£. H·ªó tr·ª£: ${CONFIG.supportedFormats.join(', ')}` };
    }
    
    // Ki·ªÉm tra k√≠ch th∆∞·ªõc file
    const stats = fs.statSync(filePath);
    if (stats.size > CONFIG.maxFileSize) {
      return { success: false, error: 'File qu√° l·ªõn (>10MB)' };
    }
    
    console.log(`üéµ ƒêang g·ª≠i voice t·ª´ file: ${fileName}`);
    
    // T·∫°o URL t·∫°m th·ªùi cho file local (c·∫ßn server ƒë·ªÉ serve file)
    // Ho·∫∑c upload file l√™n service v√† l·∫•y URL
    // T·∫°m th·ªùi return error v√¨ c·∫ßn implement upload service
    return { 
      success: false, 
      error: 'T√≠nh nƒÉng g·ª≠i file local ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng s·ª≠ d·ª•ng URL' 
    };
    
  } catch (error) {
    console.error(`‚ùå L·ªói khi g·ª≠i voice t·ª´ file: ${error.message}`);
    return { success: false, error: error.message };
  }
}

// H√†m li·ªát k√™ file voice c√≥ s·∫µn
function listVoiceFiles() {
  try {
    const files = fs.readdirSync(CONFIG.voiceFolder)
      .filter(file => CONFIG.supportedFormats.includes(path.extname(file).toLowerCase()))
      .slice(0, 10); // Gi·ªõi h·∫°n 10 file
    
    return files;
  } catch (error) {
    return [];
  }
}

module.exports.run = async function({ api, event, args, Threads }) {
  const { threadId, type } = event;
  const senderID = event.data?.uidFrom || event.senderID;

  try {
    // L·∫•y d·ªØ li·ªáu nh√≥m
    const threadData = await Threads.getData(threadId);
    let groupData = threadData.data || {};

    // X·ª≠ l√Ω l·ªánh on/off
    if (args[0] && (args[0].toLowerCase() === 'on' || args[0].toLowerCase() === 'off')) {
      const action = args[0].toLowerCase();

      // Ki·ªÉm tra quy·ªÅn admin ho·∫∑c support
      const senderIDStr = String(senderID);
      const isBotAdmin = global.users?.admin?.includes(senderIDStr);
      const isSupport = global.users?.support?.includes(senderIDStr);

      if (!isBotAdmin && !isSupport) {
        return api.sendMessage({
          msg: 'üö´ Ch·ªâ admin ho·∫∑c support bot m·ªõi c√≥ th·ªÉ b·∫≠t/t·∫Øt ch·ª©c nƒÉng voice!',
          ttl: 30000
        }, threadId, type);
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i voice
      groupData.voice_enabled = (action === 'on');

      // L∆∞u v√†o database
      await Threads.setData(threadId, groupData);

      const statusText = action === 'on' ? 'b·∫≠t' : 't·∫Øt';
      return api.sendMessage({
        msg: `‚úÖ ƒê√£ ${statusText} ch·ª©c nƒÉng voice cho nh√≥m n√†y!`,
        ttl: 30000
      }, threadId, type);
    }

    // Ki·ªÉm tra xem ch·ª©c nƒÉng c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng (m·∫∑c ƒë·ªãnh l√† b·∫≠t)
    if (groupData.voice_enabled === false) {
      return api.sendMessage({
        msg: '‚ùå Ch·ª©c nƒÉng voice ƒëang t·∫Øt!\n\n' +
             'üí° S·ª≠ d·ª•ng "voice on" ƒë·ªÉ b·∫≠t ch·ª©c nƒÉng\n' +
             'üí° S·ª≠ d·ª•ng "voice off" ƒë·ªÉ t·∫Øt ch·ª©c nƒÉng',
        ttl: 30000
      }, threadId, type);
    }

    // Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n·∫øu kh√¥ng c√≥ args
    if (args.length === 0) {
      const voiceFiles = listVoiceFiles();
      let helpMsg = 'üéµ **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Voice**\n\n' +
                   '**C√°ch s·ª≠ d·ª•ng:**\n' +
                   '‚Ä¢ voice [URL] - G·ª≠i voice t·ª´ URL\n' +
                   '‚Ä¢ voice [t√™n file] - G·ª≠i voice t·ª´ file local\n\n' +
                   '**ƒê·ªãnh d·∫°ng h·ªó tr·ª£:**\n' +
                   CONFIG.supportedFormats.join(', ') + '\n\n' +
                   '**Gi·ªõi h·∫°n:** T·ªëi ƒëa 10MB';
      
      if (voiceFiles.length > 0) {
        helpMsg += '\n\n**File c√≥ s·∫µn:**\n' + voiceFiles.join(', ');
      }
      
      return api.sendMessage({
        msg: helpMsg,
        ttl: 60000
      }, threadId, type);
    }

    const input = args.join(' ').trim();

    // Ki·ªÉm tra xem input c√≥ ph·∫£i URL kh√¥ng
    const isUrl = input.startsWith('http://') || input.startsWith('https://');

    // G·ª≠i tin nh·∫Øn ƒëang x·ª≠ l√Ω
    const processingMsg = await api.sendMessage({
      msg: `üéµ ƒêang x·ª≠ l√Ω voice${isUrl ? ' t·ª´ URL' : ' t·ª´ file'}...`,
      ttl: 10000
    }, threadId, type);

    let result;
    
    if (isUrl) {
      // G·ª≠i voice t·ª´ URL
      result = await Promise.race([
        sendVoiceFromUrl(api, event, input),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Timeout')), CONFIG.timeout)
        )
      ]);
    } else {
      // G·ª≠i voice t·ª´ file local
      result = await sendVoiceFromFile(api, event, input);
    }

    if (!result.success) {
      return api.sendMessage({
        msg: `‚ùå Kh√¥ng th·ªÉ g·ª≠i voice: ${result.error}`,
        ttl: 20000
      }, threadId, type);
    }

    // Th√†nh c√¥ng - voice ƒë√£ ƒë∆∞·ª£c g·ª≠i
    console.log(`‚úÖ ƒê√£ g·ª≠i voice th√†nh c√¥ng`);

  } catch (error) {
    console.error('‚ùå L·ªói trong l·ªánh voice:', error);
    
    if (error.message === 'Timeout') {
      return api.sendMessage({
        msg: '‚è∞ X·ª≠ l√Ω voice qu√° l√¢u, vui l√≤ng th·ª≠ l·∫°i!',
        ttl: 20000
      }, threadId, type);
    }
    
    return api.sendMessage({
      msg: '‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ª≠i voice!',
      ttl: 20000
    }, threadId, type);
  }
};
